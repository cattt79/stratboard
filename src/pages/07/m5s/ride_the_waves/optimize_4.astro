---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M5S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx, YmToPxMap } from '@/pixi/scale'
  import { $stratBoards } from '@/stores/stratBoards'

  import floor_img from '/assets/07/m5s/floor_1@3x.png?url'
  import waves_blue_img from '/assets/07/m5s/waves_blue@3x.png?url'
  import waves_cyan_img from '/assets/07/m5s/waves_cyan@3x.png?url'
  import waves_omen_img from '/assets/07/m5s/waves_omen@3x.png?url'
  import waves_orange_img from '/assets/07/m5s/waves_orange@3x.png?url'
  import waves_purple_img from '/assets/07/m5s/waves_purple@3x.png?url'
  import waves_white_img from '/assets/07/m5s/waves_white@3x.png?url'
  import waves_yellow_img from '/assets/07/m5s/waves_yellow@3x.png?url'
  import spread_img from '/assets/fan/360_r20@3x.png?url'
  import target_ring_img from '/assets/target_ring/r5@3x.png?url'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.scale.set(getScale())
    floor.anchor.set(0.5, 0.5)
    container.addChild(floor)

    const squareMask = new Graphics()
    const width = 40 * YmToPx
    squareMask.rect(-width / 2 + 0.01 * YmToPxMap[50], -width / 2 + 0.01 * YmToPxMap[50], width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    const waves_omen_texture = await Assets.load(waves_omen_img)
    const waves_blue_texture = await Assets.load(waves_blue_img)
    const waves_white_texture = await Assets.load(waves_white_img)
    const waves_yellow_texture = await Assets.load(waves_yellow_img)
    const waves_cyan_texture = await Assets.load(waves_cyan_img)
    const waves_orange_texture = await Assets.load(waves_orange_img)
    const waves_purple_texture = await Assets.load(waves_purple_img)

    const wavesTextures = {
      omen: waves_omen_texture,
      blue: waves_blue_texture,
      white: waves_white_texture,
      yellow: waves_yellow_texture,
      cyan: waves_cyan_texture,
      orange: waves_orange_texture,
      purple: waves_purple_texture,
    }

    const name = 'ride-the-waves-optimize-4'
    for (const o of [
      [-20, 'white'],
      [-10, 'cyan'],
      [-5, 'blue'],
      [5, 'purple'],
      [10, 'orange'],
      [15, 'yellow'],
    ]) {
      for (let j = 0; j < 4; j++) {
        const sprite = new Sprite(wavesTextures[o[1] as keyof typeof wavesTextures])
        sprite.scale.set(getScale())
        sprite.position.set((o[0] as number) * YmToPx, j * 5 * YmToPx)
        container.addChild(sprite)
      }
    }
    for (const o of [
      [-20, 'cyan'],
      [-15, 'blue'],
      [-5, 'orange'],
      [0, 'yellow'],
      [10, 'white'],
      [15, 'purple'],
    ]) {
      for (let j = 0; j < 3; j++) {
        const sprite = new Sprite(wavesTextures[o[1] as keyof typeof wavesTextures])
        sprite.scale.set(getScale())
        sprite.position.set((o[0] as number) * YmToPx, (-20 + j * 5) * YmToPx)
        container.addChild(sprite)
      }
    }
    for (const o of [
      [-20, 'white'],
      [-5, 'cyan'],
      [10, 'purple'],
      [15, 'yellow'],
    ]) {
      const sprite = new Sprite(wavesTextures[o[1] as keyof typeof wavesTextures])
      sprite.scale.set(getScale())
      sprite.position.set((o[0] as number) * YmToPx, -5 * YmToPx)
      container.addChild(sprite)
    }

    const roleParams: { type: RoleType; tag: string; x: number; y: number }[] = [
      { type: 'tank', tag: 'MT', x: -12.5, y: 17.5 },
      { type: 'tank', tag: 'ST', x: 2.5, y: 17.5 },
      { type: 'melee', tag: 'D1', x: -12.5, y: 10 },
      { type: 'melee', tag: 'D2', x: 2.5, y: 10 },
      { type: 'healer', tag: 'H1', x: -7.5, y: -2.5 },
      { type: 'healer', tag: 'H2', x: 7.5, y: -2.5 },
      { type: 'ranged', tag: 'D3', x: -7.5, y: -10 },
      { type: 'magic', tag: 'D4', x: 7.5, y: -10 },
    ]

    const texture = await Assets.load(spread_img)
    roleParams.forEach((r) => {
      const sprite = new Sprite(texture)
      sprite.anchor.set(0.5, 0.5)
      sprite.scale.set(getScale() * 0.25)
      sprite.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(sprite)
    })

    const x = -5 * YmToPx
    const y = (-12.5 / 2 + 20) * YmToPx
    const angle = Math.atan(2)
    const target_circle_texture = await Assets.load(target_ring_img)
    const target_circle = Sprite.from(target_circle_texture)
    target_circle.anchor.set(0.5, 0.54)
    target_circle.position.set(x, y)
    target_circle.rotation = Math.PI + angle
    container.addChild(target_circle)

    const roles: Role[] = []
    roleParams.forEach((r) => {
      const role = new Role(r.type, r.tag)
      role.scale.set(0.4)
      role.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(role)
      roles.push(role)
    })

    const g = new Graphics()
    g.rect(-10 * YmToPx, 0 * YmToPx, 5 * YmToPx, 5 * YmToPx)
    g.stroke({ color: '#ef4444', width: 4 })
    container.addChild(g)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 8
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
