---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M7S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard class="scale-200" key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite, Text } from 'pixi.js'

  import type { CombinedRoleType, RoleType } from '@/lib/role'

  import { createRoleIcon } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkDataDB } from '../_waymark'

  import floor_img from '/assets/07/m7s/floor_p2_3@3x.png?url'

  const name = 'zari_place_magic'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    await setWaymark(container, waymarkDataDB, 0.65)

    // 绘制职能点位
    const roleParams: { type: CombinedRoleType | RoleType; tag: string; x: number; y: number }[] = [
      { type: 'magic', tag: 'D4', x: 0, y: 10.75 },
      { type: 'magic', tag: 'D4', x: 14, y: 7.4 },
    ]
    roleParams.forEach((r) => {
      const role = createRoleIcon(r.type, r.tag)
      role.scale.set(0.4)
      role.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(role)
    })

    // 绘制文字
    const numberParam: { text: string; x: number; y: number; color: string }[] = [
      { text: '奇', x: 2.5, y: 10.75, color: '#3b82f6' },
      { text: '偶', x: 16.5, y: 7.4, color: '#ff751f' },
    ]
    numberParam.forEach((r) => {
      const text = new Text({
        text: r.text,
        style: {
          fontSize: 18,
          fill: r.color,
          fontFamily: 'Arial',
          align: 'center',
          stroke: { color: 'white', width: 2 },
        },
      })
      text.anchor.set(0.5, 0.5)
      text.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(text)
    })

    const squareMask = new Graphics()
    const width = floor.width // 46.4
    const height = floor.height
    squareMask.rect(-width / 2, -height / 2, width, height)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
