---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M7S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard class="scale-200" key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkDataDB } from '../_waymark'

  import floor_img from '/assets/07/m7s/floor_p2_1@3x.png?url'

  const name = 'strange_seeds_24_point'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    await setWaymark(container, waymarkDataDB, 0.65)
    const roleParams: { type: RoleType; tag: string; x: number; y: number }[] = [
      { type: 'healer', tag: 'H1', x: -3.5 - 1, y: -5.5 },
      { type: 'healer', tag: 'H2', x: -3.5 + 1, y: -5.5 },
      { type: 'tank', tag: 'MT', x: -3.5 - 1, y: -6.5 },
      { type: 'tank', tag: 'ST', x: -3.5 + 1, y: -6.5 },

      { type: 'dps', tag: 'D2', x: -22.25, y: -2.2 },
      { type: 'melee', tag: 'D1', x: -22.25, y: -3.2 },
      { type: 'ranged', tag: 'D3', x: -19, y: -3.2 },
      { type: 'ranged', tag: 'D3', x: -19, y: 4.1 },

      { type: 'ranged', tag: 'D3', x: 22.25, y: -3.2 },

      { type: 'magic', tag: 'D4', x: 14, y: 10 },
    ]

    roleParams.forEach((r) => {
      const role = new Role(r.type, r.tag)
      role.scale.set(0.3)
      role.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(role)
    })

    const safePoint: { x: number; y: number; width: number; height: number; color: string; radius: number }[] = [
      { x: -39, y: -39, width: 10, height: 10, color: '#FF0000', radius: 50 },
      { x: 136, y: 74, width: 10, height: 10, color: '#FF0000', radius: 50 },
      { x: 200, y: -35, width: 10, height: 10, color: '#FF0000', radius: 50 },
      { x: -210, y: -35, width: 10, height: 10, color: '#FF0000', radius: 50 },
      { x: -210, y: 35, width: 10, height: 10, color: '#00FF00', radius: 50 },
    ]
    safePoint.forEach((r) => {
      const point = new Graphics()
      point.roundRect(r.x, r.y, r.width, r.height, r.radius).fill(r.color)
      container.addChild(point)
    })

    const squareMask = new Graphics()
    const width = 50.1 * YmToPx // 46.4
    squareMask.rect(-width / 2, -width / 2, width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
