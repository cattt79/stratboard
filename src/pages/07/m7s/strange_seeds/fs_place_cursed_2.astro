---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M7S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard class="scale-200" key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite, Text } from 'pixi.js'

  import { AoE, AOE_PRESET } from '@/pixi/aoe'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkDataDB } from '../_waymark'
  import { drawIceFlower } from '../sinister_seeds/_draw_ice_flower'

  import floor_img from '/assets/07/m7s/floor_p2_3@3x.png?url'
  import lockon_img from '/game/vfx/lockon/eff/lockon5_t0h@3x.png?url'

  const name = 'fs_place_cursed_2'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    await setWaymark(container, waymarkDataDB, 0.65)

    const iceFlowerPos = [
      { x: -24.75, y: -12.25 },
      { x: -2.8, y: -7.2 },
    ]
    iceFlowerPos.forEach((r) => {
      drawIceFlower(app, container, r)
    })

    // 绘制点位
    const safePoint: {
      tag: string
      x: number
      y: number
      width: number
      height: number
      color: string
      radius: number
    }[] = [
      { tag: 'MT', x: -13.25, y: -9.65, width: 8, height: 8, color: '#2563eb', radius: 50 },
      { tag: 'H1', x: 7.25, y: -1.25, width: 8, height: 8, color: '#15803d', radius: 50 },
      { tag: 'H2', x: 14, y: 1.2, width: 8, height: 8, color: '#15803d', radius: 50 },
      { tag: 'D1', x: -9.9, y: -3.8, width: 8, height: 8, color: '#b91c1c', radius: 50 },
      { tag: 'D3', x: 10.1, y: 9.3, width: 8, height: 8, color: '#b91c1c', radius: 50 },
      { tag: 'D4', x: 20.2, y: 3.9, width: 8, height: 8, color: '#b91c1c', radius: 50 },
      { tag: '', x: -20.5, y: -4.4, width: 8, height: 8, color: '#6d28d9', radius: 50 },
      { tag: '', x: -19.25, y: -9.65, width: 8, height: 8, color: '#6d28d9', radius: 50 },
      { tag: '', x: 3.3, y: -9.65, width: 8, height: 8, color: '#fbbf24', radius: 50 },
    ]

    const circleAoe = AoE.createCircles(
      app,
      [{ position: { x: safePoint[0].x, y: safePoint[0].y } }, { position: { x: safePoint[3].x, y: safePoint[3].y } }],
      6,
      AOE_PRESET.lockon_circle_aoe_1,
    )
    container.addChild(circleAoe)
    const lockonTexture = await Assets.load(lockon_img)

    safePoint.forEach((r) => {
      const point = new Graphics()
      point
        .roundRect(r.x * YmToPx - r.radius * 0.1, r.y * YmToPx - r.radius * 0.1, r.width, r.height, r.radius)
        .fill(r.color)
      point.stroke({ color: '#ffffff', width: 1 })
      container.addChild(point)

      if (r.tag === 'ST' || r.tag === 'D2') {
        const lockon = new Sprite(lockonTexture)
        lockon.anchor.set(0.5, 0.5)
        lockon.position.set(r.x * YmToPx, (r.y - 2) * YmToPx)
        lockon.scale.set(0.3)
        container.addChild(lockon)
      }

      const text = new Text({
        text: r.tag,
        style: {
          fontSize: 15,
          fill: r.color,
          fontFamily: 'Arial',
          align: 'center',
          stroke: { color: 'white', width: 1 },
        },
      })
      text.anchor.set(0.5, 0.5)
      text.position.set((r.x + 1.75) * YmToPx, (r.y + 0.5) * YmToPx)
      container.addChild(text)
    })

    const squareMask = new Graphics()
    const width = floor.width // 46.4
    const height = floor.height
    squareMask.rect(-width / 2, -height / 2, width, height)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
