---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M7S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'
  import type { Coordinates } from '@/pixi/coordinates'

  import { AoE, AOE_COLORS } from '@/pixi/aoe'
  import { convertCoordinates } from '@/pixi/coordinates'
  import { Role } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { $stratBoards } from '@/stores/stratBoards'

  import floor_img from '/assets/07/m7s/floor_p3_5@3x.png?url'

  const name = 'p3_glower_power'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    // await setWaymark(container, waymarkData, 0.65)

    const squareMask = new Graphics()
    const width = 46.4 * YmToPx
    squareMask.rect(-width / 2, -width / 2, width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    // 直线aoe
    const glowerPowerSprite = AoE.createRay(60, 14.5).toSprite(app)
    glowerPowerSprite.position.set(-7.25 * YmToPx, 0)
    container.addChild(glowerPowerSprite)

    // 分散点名
    const roleParams: {
      type: RoleType
      tag: string
      coord: Coordinates
    }[] = [
      { type: 'melee', tag: 'D1', coord: { x: -15, y: -19 } },
      { type: 'dps', tag: 'D2', coord: { x: 15, y: -19 } },
      { type: 'tank', tag: 'MT', coord: { x: -8, y: -13 } },
      { type: 'tank', tag: 'ST', coord: { x: 8, y: -13 } },
      { type: 'healer', tag: 'H1', coord: { x: -13, y: -3 } },
      { type: 'healer', tag: 'H2', coord: { x: 11, y: -2 } },
      { type: 'ranged', tag: 'D3', coord: { x: -10, y: 10 } },
      { type: 'magic', tag: 'D4', coord: { x: 14, y: 6 } },
    ]
    const aoeSprite = AoE.createCircles(
      app,
      roleParams.map((role) => ({
        position: role.coord,
      })),
      6,
      { colors: AOE_COLORS.tailwind.violet },
    )
    container.addChild(aoeSprite)
    roleParams.forEach((r) => {
      const role = new Role(r.type, r.tag)
      const pos = convertCoordinates(r.coord, 'cartesian')
      role.scale.set(0.4)
      role.position.set(pos.x * YmToPx, pos.y * YmToPx)
      container.addChild(role)
    })

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
