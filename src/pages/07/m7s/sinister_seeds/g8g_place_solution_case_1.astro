---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M5S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { AoE } from '@/pixi/aoe'
  import { drawArrow } from '@/pixi/arrow'
  import { getScale, YmToPx, YmToPxMap } from '@/pixi/scale'
  import { $stratBoards } from '@/stores/stratBoards'

  import { Role } from '../../../../pixi/role'

  import floor_img from '/assets/07/m7s/floor_p1_1@3x.png?url'
  import omen_img from '/assets/fan/360_r20_purple@3x.png?url'
  import target_ring_img from '/assets/target_ring/r5@3x.png?url'
  import lock_on_img from '/game/vfx/lockon/eff/lockon5_t0h@3x.png?url'

  const name = 'g8g_place_solution_case_2'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    const aoeParams: { x: number; y: number }[] = [
      { x: 5, y: 5 },
      { x: -5, y: 5 },
      { x: 0, y: 0 },
      { x: 0, y: -6 },
    ]
    aoeParams.forEach((r) => {
      const circle = AoE.createCircle(7).toSprite(app)
      circle.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(circle)
    })

    const squareMask = new Graphics()
    const width = 40 * YmToPx
    squareMask.rect(-width / 2 + 0.01 * YmToPxMap[50], -width / 2 + 0.01 * YmToPxMap[50], width, width)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    // 紫圈
    const omenParams: { x: number; y: number }[] = [
      { x: 9, y: 9 },
      { x: -9, y: 9 },
      { x: 9, y: -9 },
      { x: -9, y: -9 },
    ]
    const omenTexture = await Assets.load(omen_img)
    const lockOnTexture = await Assets.load(lock_on_img)
    omenParams.forEach((r) => {
      const sprite = new Sprite(omenTexture)
      sprite.anchor.set(0.5, 0.5)
      sprite.scale.set((getScale() * 6) / 20)
      sprite.position.set(r.x * YmToPx, r.y * YmToPx)
      container.addChild(sprite)

      const lock_on_sprite = new Sprite(lockOnTexture)
      lock_on_sprite.anchor.set(0.5, 0.5)
      lock_on_sprite.scale.set((getScale() * 12) / 20)
      lock_on_sprite.position.set(r.x * YmToPx, (r.y - 3.5) * YmToPx)
      container.addChild(lock_on_sprite)
    })

    const targetRingTexture = await Assets.load(target_ring_img)
    const targetRing = Sprite.from(targetRingTexture)
    targetRing.anchor.set(0.5, 0.5)
    targetRing.position.set(0, -0.8 * YmToPx)
    targetRing.scale.set(1.4)
    targetRing.rotation = 0
    container.addChild(targetRing)

    // 近战组
    const D1 = new Role('melee', 'D1')
    D1.scale.set(0.4)
    D1.position.set(-1.1 * YmToPx, -7 * YmToPx)
    container.addChild(D1)
    const D2 = new Role('dps', 'D2')
    D2.scale.set(0.4)
    D2.position.set(1.1 * YmToPx, -7 * YmToPx)
    container.addChild(D2)
    const MT = new Role('tank', 'MT')
    MT.scale.set(0.4)
    MT.position.set(-1.1 * YmToPx, -9.5 * YmToPx)
    container.addChild(MT)
    const ST = new Role('tank', 'ST')
    ST.scale.set(0.4)
    ST.position.set(1.1 * YmToPx, -9.5 * YmToPx)
    container.addChild(ST)

    // D3D4
    const D3 = new Role('ranged', 'D3')
    D3.scale.set(0.4)
    D3.position.set(-9 * YmToPx, -9 * YmToPx)
    container.addChild(D3)
    const D4 = new Role('magic', 'D4')
    D4.scale.set(0.4)
    D4.position.set(9 * YmToPx, -9 * YmToPx)
    container.addChild(D4)

    // H1H2
    const H1 = new Role('healer', 'H1')
    H1.scale.set(0.4)
    H1.position.set(-9 * YmToPx, 9 * YmToPx)
    container.addChild(H1)
    const H2 = new Role('healer', 'H2')
    H2.scale.set(0.4)
    H2.position.set(9 * YmToPx, 9 * YmToPx)
    container.addChild(H2)

    drawArrow(container, aoeParams[0], aoeParams[1], 0xffffff, 0.4, 1.5)
    drawArrow(container, aoeParams[1], aoeParams[2], 0xffffff, 0.4, 1.5)
    drawArrow(container, aoeParams[2], aoeParams[3], 0xffffff, 0.4, 1.5)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
