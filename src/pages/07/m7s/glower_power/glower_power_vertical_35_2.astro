---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M7S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" class="scale-200" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { AoE } from '@/pixi/aoe'
  import { Role } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkDataDB } from '../_waymark'

  import floor_img from '/assets/07/m7s/floor_p2_3@3x.png?url'

  const name = 'glower_power_vertical_35'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    await setWaymark(container, waymarkDataDB, 0.65)

    // 直条
    const rect = AoE.createRect(14, 29).toSprite(app)
    rect.position.set(-12.5 * YmToPx, 0)
    container.addChild(rect)

    // 所有人的位置
    const positionParams: { x: number; y: number }[] = [
      { x: -23.8 * YmToPx, y: -11.3 * YmToPx },
      { x: -20 * YmToPx, y: -5 * YmToPx },
      { x: -22 * YmToPx, y: 5 * YmToPx },
      { x: 2 * YmToPx, y: 10 * YmToPx },
      { x: 1 * YmToPx, y: -11.3 * YmToPx },
      { x: -5 * YmToPx, y: -7 * YmToPx },
      { x: -2 * YmToPx, y: 1 * YmToPx },
      { x: 8 * YmToPx, y: 3 * YmToPx },
    ]

    // 分散特效
    positionParams.forEach((r) => {
      const circle = AoE.createCircle(6).toSprite(app)
      circle.position.set(r.x, r.y)
      container.addChild(circle)
    })

    // MT组
    const D1 = new Role('melee', 'D1')
    D1.scale.set(0.4)
    D1.position.set(positionParams[0].x, positionParams[0].y)
    container.addChild(D1)
    const MT = new Role('tank', 'MT')
    MT.scale.set(0.4)
    MT.position.set(positionParams[1].x, positionParams[1].y)
    container.addChild(MT)
    const H1 = new Role('healer', 'H1')
    H1.scale.set(0.4)
    H1.position.set(positionParams[2].x, positionParams[2].y)
    container.addChild(H1)
    const D3 = new Role('ranged', 'D3')
    D3.scale.set(0.4)
    D3.position.set(positionParams[3].x, positionParams[3].y)
    container.addChild(D3)

    // ST组
    const D2 = new Role('dps', 'D2')
    D2.scale.set(0.4)
    D2.position.set(positionParams[4].x, positionParams[4].y)
    container.addChild(D2)
    const ST = new Role('tank', 'ST')
    ST.scale.set(0.4)
    ST.position.set(positionParams[5].x, positionParams[5].y)
    container.addChild(ST)
    const H2 = new Role('healer', 'H2')
    H2.scale.set(0.4)
    H2.position.set(positionParams[6].x, positionParams[6].y)
    container.addChild(H2)
    const D4 = new Role('magic', 'D4')
    D4.scale.set(0.4)
    D4.position.set(positionParams[7].x, positionParams[7].y)
    container.addChild(D4)

    // 蒙版
    const rectMask = new Graphics()
    const width = floor.width
    const height = floor.height
    rectMask.rect(-width / 2, -height / 2, width, height)
    rectMask.fill({ color: 'white' })
    container.addChild(rectMask)
    container.mask = rectMask

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
