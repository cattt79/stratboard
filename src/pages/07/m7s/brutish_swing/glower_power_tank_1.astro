---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M7S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" canvasClass="scale-200" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { AoE } from '@/pixi/aoe'
  import { convertCoordinates } from '@/pixi/coordinates'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkDataDB } from '../_waymark'

  import floor_img from '/assets/07/m7s/floor_p2_3@3x.png?url'

  const name = 'glower_power_tank_1'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    await setWaymark(container, waymarkDataDB, 0.65)

    const aoeSprite = AoE.createRay(60, 14).toSprite(app)
    aoeSprite.position.set(-19.55 * YmToPx, -15 * YmToPx)
    container.addChild(aoeSprite)

    const positions = [
      { x: -5, y: -6 },
      { x: -19.85, y: -4.7 },
    ]
    const dot = new Graphics()
    positions.forEach((p) => {
      const { x, y } = convertCoordinates(p, 'cartesian')
      dot.circle(x * YmToPx, y * YmToPx, 0.4 * YmToPx)
    })
    // dot.fill({ color: '#dc2626' })
    dot.stroke({ color: '#dc2626', width: 2 })
    dot.zIndex = 100
    container.addChild(dot)

    const squareMask = new Graphics()
    const width = 50.1 * YmToPx // 46.4
    const height = 25.1 * YmToPx // 25
    squareMask.rect(-width / 2, (-width + height) / 2, width, height)
    squareMask.fill({ color: 'white' })
    container.mask = squareMask
    container.addChild(squareMask)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
