---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M7S">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { waymarkDataDB } from '../_waymark'

  import floor_img from '/assets/07/m7s/floor_p2_5@3x.png?url'
  import new_wall_img from '/assets/07/m7s/floor_p2_wall_1@3x.png?url'
  import chn_img from '/game/vfx/channeling/eff/chn_thorn_fix@3x.png?url'

  const name = 'DemoDM_chn_2'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale())
    container.addChild(floor)

    await setWaymark(container, waymarkDataDB, 0.65)

    // 墙体
    const new_wall_texture = await Assets.load(new_wall_img)
    const new_wall = Sprite.from(new_wall_texture)
    new_wall.anchor.set(0.5, 0.5)
    new_wall.scale.set(getScale())
    container.addChild(new_wall)

    const wallPos = [
      { x: -30, y: 0 }, // 左
      { x: -12, y: -17 }, // 上
      { x: 12, y: 17 }, // 下
    ]

    // 角色位置
    const roleParam: { type: RoleType; tag: string; x: number; y: number }[] = [
      { type: 'ranged', tag: 'D3', x: -22, y: 2 },
      { type: 'magic', tag: 'D4', x: -8, y: -9 },
      { type: 'tank', tag: 'MT', x: 10, y: 10 },
    ]

    // 同时画出角色和连线
    const chnTexture = await Assets.load(chn_img)
    roleParam.forEach((r, i) => {
      const role = new Role(r.type, r.tag)
      role.scale.set(0.5)
      role.position.set(r.x * YmToPx, r.y * YmToPx)

      // 连线
      const p1 = { x: wallPos[i].x * YmToPx, y: wallPos[i].y * YmToPx }
      const p2 = { x: roleParam[i].x * YmToPx, y: roleParam[i].y * YmToPx }
      const dx = p2.x - p1.x
      const dy = p2.y - p1.y
      const len = Math.sqrt(dx * dx + dy * dy)
      const angle = Math.atan2(dy, dx)
      const chn = new Sprite(chnTexture)
      chn.anchor.set(0, 0.5)
      chn.position.set(p1.x, p1.y)
      chn.rotation = angle
      chn.width = len
      chn.height = YmToPx * 4

      container.addChild(chn)
      container.addChild(role)
    })

    // 蒙版
    const rectMask = new Graphics()
    const width = floor.width * 1.26
    const height = floor.height * 1.5
    rectMask.rect(-width / 2 + 0.5, -height / 2, width, height)
    rectMask.fill({ color: 'white' })
    container.addChild(rectMask)
    container.mask = rectMask

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 8
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
