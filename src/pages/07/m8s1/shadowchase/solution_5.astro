---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M8S1">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" canvasClass="h-full w-full" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import { AoE, AOE_PRESET } from '@/pixi/aoe'
  import { convertCoordinates, degToRad, scaleCoordinates } from '@/pixi/coordinates'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { createTargetRing } from '../_target'
  import { waymarkData } from '../_waymark'

  import floor_img from '/assets/07/m8s1/floor_1@3x.png?url'

  const name = 'solution_5'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const zIndexMap = {
      floor: 0,
      line: 5,
      waymark: 10,
      targetRing: 20,
      spread: 30,
      stack: 30,
      fang: 35,
      role: 40,
      lockon: 50,
    }

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale(50, 0.78))
    floor.zIndex = zIndexMap.floor
    container.addChild(floor)

    const waymarks = await setWaymark(container, waymarkData, 1, zIndexMap.waymark)
    waymarks.forEach((waymark) => {
      waymark.rotation = degToRad(90)
    })

    const dot = new Graphics()
    dot.circle(-8.5 * YmToPx, 1.2 * YmToPx, 0.3 * YmToPx)
    dot.circle(-8.5 * YmToPx, -1.2 * YmToPx, 0.3 * YmToPx)
    dot.fill({ color: '#16a34a' })
    dot.stroke({ color: '#ffffff', width: 1 })
    dot.zIndex = 100
    container.addChild(dot)

    const params2 = [
      { p: { r: 3, deg: 135 }, rotation: -45 },
      { p: { r: 9, deg: -45 }, rotation: -45 },
    ]

    for (const param of params2) {
      const p = scaleCoordinates(convertCoordinates(param.p, 'cartesian'), YmToPx)
      const rotation = degToRad(param.rotation)

      const aoe = AoE.createRect(6, 40, AOE_PRESET.style_2).toSprite(app)
      aoe.position = p
      aoe.rotation = rotation
      aoe.zIndex = zIndexMap.line
      container.addChild(aoe)
    }

    const targetRing = await createTargetRing()
    targetRing.zIndex = zIndexMap.targetRing
    container.addChild(targetRing)

    const circleMask = new Graphics()
    const circleRadius = 15.1 * YmToPx
    circleMask.circle(0, 0, circleRadius)
    circleMask.fill({ color: 'white' })
    container.mask = circleMask
    container.addChild(circleMask)

    container.rotation = degToRad(-90)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
