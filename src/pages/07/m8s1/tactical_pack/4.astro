---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M8S1">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" canvasClass="scale-200" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { CombinedRoleType, RoleType } from '@/lib/role'
  import type { Coordinates } from '@/pixi/coordinates'

  import { AoE, AOE_COLORS } from '@/pixi/aoe'
  import { convertCoordinates, degToRad, scaleCoordinates } from '@/pixi/coordinates'
  import { createRoleIcon } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { create_aether, create_wolf } from '../_adds'
  import { waymarkData } from '../_waymark'

  import floor_img from '/assets/07/m8s1/floor_5@3x.png?url'

  const name = '4'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale(50, 0.78))
    container.addChild(floor)

    await setWaymark(container, waymarkData, 0.65)

    const wolfOfWindPosition = { r: 10, deg: 180 }
    const wolfOfStonePosition = { r: 10, deg: 0 }
    const aetherOfWindPosition = { r: 10, deg: 90 }
    const aetherOfStonePosition = { r: 10, deg: -90 }

    const roleParams: { type: RoleType | CombinedRoleType; tag: string; p: Coordinates }[] = [
      { type: 'tank', tag: '', p: { r: 10.25, deg: wolfOfStonePosition.deg + 15 } },
      { type: 'healer|dps', tag: '', p: { r: 10.45, deg: wolfOfStonePosition.deg - 18 } },
      { type: 'tank', tag: '', p: { r: 10.25, deg: wolfOfWindPosition.deg + 15 } },
      { type: 'healer|dps', tag: '', p: { r: 10.45, deg: wolfOfWindPosition.deg - 18 } },
    ]

    const fan = AoE.createFans(
      app,
      [
        {
          position: wolfOfStonePosition,
          rotation: 90,
          options: {
            colors: AOE_COLORS.tailwind.amber,
          },
        },
        {
          position: wolfOfWindPosition,
          rotation: -90,
          options: {
            colors: AOE_COLORS.tailwind.green,
          },
        },
      ],
      30,
      90,
    )
    container.addChild(fan)

    const ray = AoE.createRays(
      app,
      [
        {
          position: wolfOfStonePosition,
          rotation: -90,
          options: {
            colors: AOE_COLORS.tailwind.amber,
          },
        },
        {
          position: wolfOfWindPosition,
          rotation: 90,
          options: {
            colors: AOE_COLORS.tailwind.green,
          },
        },
      ],
      4,
      30,
    )
    container.addChild(ray)

    roleParams.forEach((r) => {
      const role = createRoleIcon(r.type, r.tag)
      role.scale.set(0.4 * 0.78)
      role.position = scaleCoordinates(convertCoordinates(r.p, 'cartesian'), YmToPx)
      container.addChild(role)
    })

    const wolfOfWind = await create_wolf('wind')
    wolfOfWind.rotation = degToRad(180)
    wolfOfWind.position = scaleCoordinates(convertCoordinates(wolfOfWindPosition, 'cartesian'), YmToPx)
    container.addChild(wolfOfWind)
    const wolfOfStone = await create_wolf('stone')
    wolfOfStone.rotation = degToRad(0)
    wolfOfStone.position = scaleCoordinates(convertCoordinates(wolfOfStonePosition, 'cartesian'), YmToPx)
    container.addChild(wolfOfStone)

    const aetherOfWind = await create_aether('wind', '3')
    aetherOfWind.position = scaleCoordinates(convertCoordinates(aetherOfWindPosition, 'cartesian'), YmToPx)
    container.addChild(aetherOfWind)
    const aetherOfStone = await create_aether('stone', '3')
    aetherOfStone.position = scaleCoordinates(convertCoordinates(aetherOfStonePosition, 'cartesian'), YmToPx)
    container.addChild(aetherOfStone)

    const circleMask = new Graphics()
    const circleRadius = 15.1 * YmToPx
    circleMask.circle(0, 0, circleRadius)
    circleMask.fill({ color: 'white' })
    container.mask = circleMask
    container.addChild(circleMask)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
