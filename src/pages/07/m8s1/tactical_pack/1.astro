---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M8S1">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" canvasClass="scale-200" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { CombinedRoleType, RoleType } from '@/lib/role'
  import type { Coordinates } from '@/pixi/coordinates'

  import { create_chn_m0146_roc01h } from '@/pixi/channeling/chn_m0146_roc01h'
  import { create_chn_m0146_win01h } from '@/pixi/channeling/chn_m0146_win01h'
  import { convertCoordinates, degToRad, distance, getMidpoint, scaleCoordinates } from '@/pixi/coordinates'
  import { createRoleIcon } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { setWaymark } from '@/pixi/waymark'
  import { $stratBoards } from '@/stores/stratBoards'

  import { create_wolf } from '../_adds'
  import { waymarkData } from '../_waymark'

  import floor_img from '/assets/07/m8s1/floor_5@3x.png?url'

  const name = '1'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale(50, 0.78))
    container.addChild(floor)

    await setWaymark(container, waymarkData, 0.65)

    const wolfOfWindPosition = { r: 10.8, deg: 180 }
    const wolfOfStonePosition = { r: 10.8, deg: 0 }

    const roleParams: { type: RoleType | CombinedRoleType; tag: string; p: Coordinates }[] = [
      { type: 'tank', tag: 'MT', p: { x: -1.5, y: -4.5 } },
      { type: 'healer', tag: 'H2', p: { x: -1.5, y: -1.5 } },
      { type: 'ranged', tag: 'D3', p: { x: -1.5, y: 1.5 } },
      { type: 'magic', tag: 'D4', p: { x: -1.5, y: 4.5 } },
      { type: 'tank', tag: 'ST', p: { x: 1.5, y: -4.5 } },
      { type: 'healer', tag: 'H1', p: { x: 1.5, y: -1.5 } },
      { type: 'melee', tag: 'D1', p: { x: 1.5, y: 1.5 } },
      { type: 'dps', tag: 'D2', p: { x: 1.5, y: 4.5 } },
    ]

    for (let i = 0; i < 4; i++) {
      const p1 = convertCoordinates(wolfOfWindPosition, 'cartesian')
      const p2 = convertCoordinates(roleParams[i].p, 'cartesian')
      const l = distance(p1, p2) - 1
      const tether = await create_chn_m0146_win01h(l)
      tether.position = scaleCoordinates(getMidpoint(p1, p2), YmToPx)
      tether.rotation = Math.atan2(p2.y - p1.y, p2.x - p1.x)
      container.addChild(tether)
    }
    for (let i = 4; i < 8; i++) {
      const p1 = convertCoordinates(wolfOfStonePosition, 'cartesian')
      const p2 = convertCoordinates(roleParams[i].p, 'cartesian')
      const l = distance(p1, p2) - 1
      const tether = await create_chn_m0146_roc01h(l)
      tether.position = scaleCoordinates(getMidpoint(p1, p2), YmToPx)
      tether.rotation = Math.atan2(p2.y - p1.y, p2.x - p1.x)
      container.addChild(tether)
    }

    roleParams.forEach((r) => {
      const role = createRoleIcon(r.type, r.tag)
      role.scale.set(0.4 * 0.78)
      role.position = scaleCoordinates(convertCoordinates(r.p, 'cartesian'), YmToPx)
      container.addChild(role)
    })

    const wolfOfWind = await create_wolf('wind')
    wolfOfWind.rotation = degToRad(-90)
    wolfOfWind.position = scaleCoordinates(convertCoordinates(wolfOfWindPosition, 'cartesian'), YmToPx)
    container.addChild(wolfOfWind)
    const wolfOfStone = await create_wolf('stone')
    wolfOfStone.rotation = degToRad(90)
    wolfOfStone.position = scaleCoordinates(convertCoordinates(wolfOfStonePosition, 'cartesian'), YmToPx)
    container.addChild(wolfOfStone)

    const circleMask = new Graphics()
    const circleRadius = 15.1 * YmToPx
    circleMask.circle(0, 0, circleRadius)
    circleMask.fill({ color: 'white' })
    container.mask = circleMask
    container.addChild(circleMask)

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
