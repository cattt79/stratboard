---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M8S2">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Graphics, Sprite } from 'pixi.js'

  import type { Coordinates } from '@/pixi/coordinates'

  import { AoE, AOE_COLORS } from '@/pixi/aoe'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { $stratBoards } from '@/stores/stratBoards'

  import floor_img from '/assets/07/m8s2/floor_4@3x.png?url'

  const name = 'twofoldTempest_mech'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    const centerToNorth = 17.54 * Math.cos(Math.PI / 5) + 8
    const centerToSouth = 17.54 + 8
    const YmToPxLarge = YmToPx * 1.25
    floor.anchor.set(0.5, centerToNorth / (centerToNorth + centerToSouth))
    floor.scale.set(getScale() * 1.25)
    container.addChild(floor)

    // rect aoe
    const rectPos: { x: number; y: number } = {
      x: 17.54 * Math.sin(Math.PI / 5) * YmToPxLarge,
      y: -17.54 * Math.cos(Math.PI / 5) * YmToPxLarge,
    }
    const aoeRect = AoE.createRect(16 * 1.25, 40, {
      colors: AOE_COLORS.tailwind.lime,
      innerShadowOptions: { alpha: 0 },
    }).toSprite(app)
    aoeRect.rotation = Math.PI / 5
    aoeRect.position.set(rectPos.x, rectPos.y)
    container.addChild(aoeRect)

    // circle aoe
    const circleParam: {
      radiu: number
      pos: Coordinates
    }[] = [
      {
        radiu: 5 * 1.25,
        pos: {
          x: (17.54 + 7) * Math.sin((3 * Math.PI) / 5) * 1.25,
          y: -(17.54 + 7) * Math.cos((3 * Math.PI) / 5) * 1.25,
        },
      },
      {
        radiu: 10 * 1.25,
        pos: {
          x: -(17.54 + 7) * Math.sin(Math.PI / 5) * 1.25,
          y: -(17.54 + 7) * Math.cos(Math.PI / 5) * 1.25,
        },
      },
    ]
    const aoeCircle = AoE.createCircles(
      app,
      circleParam.map((c) => ({
        position: c.pos,
        radius: c.radiu,
      })),
      3,
      { colors: AOE_COLORS.tailwind.teal },
    )
    container.addChild(aoeCircle)

    // 'masking' destroyed island
    const maskParam: { w: number; h: number } = { w: app.screen.width, h: (17 * app.screen.height) / 24 }
    const smallRect: { w: number; h: number } = { w: 18 * YmToPxLarge, h: 5 * YmToPxLarge }
    const maskGraphic = new Graphics()

    maskGraphic.rect(0, 0, maskParam.w, maskParam.h)
    maskGraphic.fill({ color: 'white' })
    maskGraphic.rect(-smallRect.w / 2 + maskParam.w / 2, -smallRect.h + maskParam.h, smallRect.w, smallRect.h)
    maskGraphic.fill({ color: 'black' })

    const rt = app.renderer.generateTexture(maskGraphic)
    const maskSprite = new Sprite(rt)
    container.mask = maskSprite
    app.stage.addChild(maskSprite) // 注意：必须添加到舞台上

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
