---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M8S2">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Sprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'

  import { Role } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { $stratBoards } from '@/stores/stratBoards'

  import floor_img from '/assets/07/m8s2/floor_2@3x.png?url'
  import stack_omen_img from '/game/vfx/lockon/eff/com_share4a1@3x.png?url'

  const name = 'demo'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    const radianSW = (2 * 1 * Math.PI) / 5
    const radianSE = -(2 * 1 * Math.PI) / 5
    const YmToPxLarge = 1.25 * YmToPx
    // const radius = 17.54
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale() * 1.25)
    container.addChild(floor)

    // const roleParams: { type: RoleType; tag: string, p: PolarRadianCoordinates}[] = [
    //   { type: 'healer', tag: 'H1', p: {r: radius, rad: radianSW}},
    //   { type: 'healer', tag: 'H2', p: {r: radius, rad: radianSE}},
    //   { type: 'ranged', tag: 'D3', p: {r: radius, rad: radianSW + 0.2}},
    //   { type: 'magic', tag: 'D4', p: {r: radius, rad: radianSE}},
    //   { type: 'melee', tag: 'D1', p: {r: radius, rad: radianSW + 0.4}},
    //   { type: 'dps', tag: 'D2', p: {r: radius, rad: radianSE}},
    //   { type: 'tank', tag: 'MT', p: {r: radius, rad: radianSW + 0.6}},
    //   { type: 'tank', tag: 'ST', p: {r: radius, rad: radianSE}},
    // ]

    const roleParams: { type: RoleType; tag: string; x: number; y: number }[] = [
      { type: 'healer', tag: 'H1', x: -17.54 * Math.sin(radianSW) + 5, y: 17.54 * Math.cos(radianSW) + 1 },
      { type: 'healer', tag: 'H2', x: -17.54 * Math.sin(radianSE) - 5, y: 17.54 * Math.cos(radianSE) + 1 },
      { type: 'ranged', tag: 'D3', x: -17.54 * Math.sin(radianSW) + 3, y: 17.54 * Math.cos(radianSW) + 1 },
      { type: 'magic', tag: 'D4', x: -17.54 * Math.sin(radianSE) - 3, y: 17.54 * Math.cos(radianSE) + 1 },
      { type: 'melee', tag: 'D1', x: -17.54 * Math.sin(radianSW) + 3, y: 17.54 * Math.cos(radianSW) - 2 },
      { type: 'dps', tag: 'D2', x: -17.54 * Math.sin(radianSE) - 3, y: 17.54 * Math.cos(radianSE) - 2 },
      { type: 'tank', tag: 'MT', x: -17.54 * Math.sin(radianSW) + 5, y: 17.54 * Math.cos(radianSW) - 2 },
      { type: 'tank', tag: 'ST', x: -17.54 * Math.sin(radianSE) - 5, y: 17.54 * Math.cos(radianSE) - 2 },
    ]

    roleParams.forEach((r) => {
      const role = new Role(r.type, r.tag)
      role.scale.set(0.4)
      role.position.set(r.x * YmToPxLarge, r.y * YmToPxLarge)
      container.addChild(role)
    })

    // stack on both healers
    const stackOmenParams: { x: number; y: number }[] = [
      { x: -17.54 * Math.sin(radianSW) + 4, y: 17.54 * Math.cos(radianSW) - 1 },
      { x: -17.54 * Math.sin(radianSE) - 4, y: 17.54 * Math.cos(radianSE) - 1 },
    ]

    const stackOmenTexture = await Assets.load(stack_omen_img)
    stackOmenParams.forEach((r) => {
      const stackOmen = Sprite.from(stackOmenTexture)
      stackOmen.anchor.set(0.5, 0.5)
      stackOmen.position.set(r.x * YmToPxLarge, r.y * YmToPxLarge)
      stackOmen.scale.set(getScale() * 1)
      container.addChild(stackOmen)
    })

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
