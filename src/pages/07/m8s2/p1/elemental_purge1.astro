---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M8S2">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Sprite } from 'pixi.js'

  import type { RoleType } from '@/lib/role'

  import { AoE, AOE_COLORS } from '@/pixi/aoe'
  import { Role } from '@/pixi/role'
  import { getScale, YmToPx } from '@/pixi/scale'
  import { $stratBoards } from '@/stores/stratBoards'

  import floor_img from '/assets/07/m8s2/floor_9@3x.png?url'
  import bind_img from '/game/vfx/common/eff/dk10ht_bind0h@3x.png?url'
  import target_img from '/game/vfx/lockon/eff/lockon5_t0h@3x.png?url'

  const name = 'demo'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    const YmToPxLarge = YmToPx * 1.25
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale() * 1.25)
    container.addChild(floor)

    const roleParams: {
      type: RoleType
      tag: string
      platform: number
      offset: { vertical: number; horizontal: number }
    }[] = [
      { type: 'tank', tag: 'MT', platform: 1, offset: { vertical: 0, horizontal: 0 } },
      { type: 'healer', tag: 'H1', platform: 3, offset: { vertical: 0, horizontal: 0 } },
      { type: 'melee', tag: 'D1', platform: 3, offset: { vertical: -3, horizontal: 3 } },
      { type: 'ranged', tag: 'D3', platform: 3, offset: { vertical: 3, horizontal: -1 } },
      { type: 'dps', tag: 'D2', platform: 3, offset: { vertical: 0, horizontal: 2 } },
      { type: 'magic', tag: 'D4', platform: 3, offset: { vertical: 0, horizontal: -2 } },
      { type: 'tank', tag: 'ST', platform: 4, offset: { vertical: 0, horizontal: 0 } },
      { type: 'healer', tag: 'H2', platform: 3, offset: { vertical: 3, horizontal: 1 } },
    ]

    // 半场刀
    const fan = AoE.createFan(33, 180, { colors: AOE_COLORS.tailwind.orange }).toSprite(app)
    // fan.anchor.set(0.5, centerToNorth / (centerToNorth + centerToSouth))
    fan.rotation = Math.PI
    fan.alpha = 0.75
    container.addChild(fan)

    // 禁锢MT
    const bindParams = [roleParams[0]]
    const bindTexture = await Assets.load(bind_img)
    bindParams.forEach((b) => {
      const bind = new Sprite(bindTexture)
      bind.anchor.set(0.5, 0.5)
      const radian = (2 * b.platform * Math.PI) / 5
      bind.position.set(
        -17.54 * YmToPxLarge * Math.sin(radian) + b.offset.horizontal * YmToPxLarge,
        17.54 * YmToPxLarge * Math.cos(radian) + b.offset.vertical * YmToPxLarge,
      )
      bind.scale.set(getScale(10) * 3)
      container.addChild(bind)
    })

    roleParams.forEach((r) => {
      const radian = (2 * r.platform * Math.PI) / 5
      const role = new Role(r.type, r.tag)
      role.scale.set(0.4)
      role.position.set(
        -17.54 * YmToPxLarge * Math.sin(radian) + r.offset.horizontal * YmToPxLarge,
        17.54 * YmToPxLarge * Math.cos(radian) + r.offset.vertical * YmToPxLarge,
      )
      container.addChild(role)
    })

    const targetTexture = await Assets.load(target_img)
    const targetParams = [roleParams[6], roleParams[1]]
    targetParams.forEach((r) => {
      const target = new Sprite(targetTexture)
      const radian = (2 * r.platform * Math.PI) / 5
      target.anchor.set(0.5, 0.5)
      target.position.set(
        -17.54 * YmToPxLarge * Math.sin(radian) + r.offset.horizontal * YmToPxLarge,
        17.54 * YmToPxLarge * Math.cos(radian) + (r.offset.vertical - 3) * YmToPxLarge,
      )
      target.scale.set(getScale(30))
      container.addChild(target)
    })

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
