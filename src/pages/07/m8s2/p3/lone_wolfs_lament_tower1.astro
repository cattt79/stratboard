---
import Layout from '@/layouts/Layout.astro'
import StratBoard from '@/components/StratBoard.astro'
---

<Layout title="M8S2">
  <div class="flex h-screen w-screen items-center justify-center">
    <StratBoard key="stratboard" />
  </div>
</Layout>

<script>
  import { listenKeys } from 'nanostores'
  import { Assets, Container, Sprite } from 'pixi.js'

  import { getScale, YmToPx } from '@/pixi/scale'
  import { $stratBoards } from '@/stores/stratBoards'

  import floor_img from '/assets/07/m8s2/floor_12@3x.png?url'
  import tower2_img from '/game/vfx/omen/eff/general_trap_o2x@3x.png?url'
  import tower3_img from '/game/vfx/omen/eff/general_trap_o3x@3x.png?url'
  import tower1_img from '/game/vfx/omen/eff/m0119_trap_01t@3x.png?url'

  const name = 'elemental_purge_tower1'

  listenKeys($stratBoards, ['stratboard'], async (stratBoards) => {
    const app = stratBoards.stratboard

    const container = new Container()
    container.position.set(app.screen.width / 2, app.screen.height / 2)
    app.stage.addChild(container)

    const floorTexture = await Assets.load(floor_img)
    const floor = Sprite.from(floorTexture)
    const YmToPxLarge = YmToPx * 1.25
    floor.anchor.set(0.5, 0.5)
    floor.scale.set(getScale() * 1.25)
    container.addChild(floor)

    // 造塔
    // 1 = 单人塔
    // 2 = 双人塔
    // 3 = 三人塔
    const tower1Texture = await Assets.load(tower1_img)
    const tower2Texture = await Assets.load(tower2_img)
    const tower3Texture = await Assets.load(tower3_img)
    const towerPositions = [
      { platform: 0, type: 3 },
      { platform: 1, type: 1 },
      { platform: 2, type: 1 },
      { platform: 3, type: 2 },
      { platform: 4, type: 1 },
    ]

    towerPositions.forEach((p) => {
      const radian = (2 * p.platform * Math.PI) / 5
      const tower = (function () {
        switch (p.type) {
          case 1:
            return Sprite.from(tower1Texture)
          case 2:
            return Sprite.from(tower2Texture)
          case 3:
            return Sprite.from(tower3Texture)
          default:
            return Sprite.from(tower1Texture)
        }
      })()

      tower.anchor.set(0.5, 0.5)
      tower.scale.set(0.35)
      tower.position.set(-17.54 * YmToPxLarge * Math.sin(radian), 17.54 * YmToPxLarge * Math.cos(radian))
      tower.blendMode = 'overlay'
      container.addChild(tower)
    })

    // take screenshot
    await new Promise((resolve) => setTimeout(resolve, 1000))
    const url = await app.renderer.extract.base64(app.stage)
    const screenshot = document.createElement('a')
    document.body.append(screenshot)
    screenshot.style.position = 'fixed'
    screenshot.style.top = '20px'
    screenshot.style.right = '20px'
    screenshot.download = name
    screenshot.href = url
    const image = new Image()
    image.width = app.screen.width / 4
    image.src = url
    screenshot.innerHTML = image.outerHTML
  })
</script>
